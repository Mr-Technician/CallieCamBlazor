<PageTitle>Index</PageTitle>
@page "/"
@using System.Text.Json;
@using System.Device.Gpio;

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
	<MudText Typo="Typo.h4" Align="Align.Center" GutterBottom>CallieCam</MudText>
	<MudCard Outlined Style="width:1024px;height:576px;margin:auto">
		<iframe src="http://192.168.0.105:8080/min.php" title="CallieCam" scrolling="no" style="width:1024px;height:576px;border:none;margin-top:-50px;margin:auto;display:block;"></iframe>
	</MudCard>

	<div class="mt-3" style="width:1024px;margin:auto;">
		<MudButton Variant="Variant.Filled" DisableElevation Color="Color.Success" StartIcon="@Icons.Material.Filled.FlashlightOn" OnClick="(() => ToggleLights(true))">LEDs On</MudButton>
		<MudButton Variant="Variant.Filled" DisableElevation Color="Color.Error" StartIcon="@Icons.Material.Filled.FlashlightOff" OnClick="(() => ToggleLights(false))">LEDs Off</MudButton>
		<MudButton Variant="Variant.Filled" DisableElevation Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh" OnClick="(() => GetSensorData())">Refresh Data</MudButton>
		<MudGrid Class="mt-1">
			<MudItem md="4" sm="12">
				<MudCard Outlined>
					<MudCardContent>
						<MudText Typo="Typo.h2" Align="Align.Center">@string.Format("{0:0.#}", tempF)°</MudText>
					</MudCardContent>
				</MudCard>
			</MudItem>
			<MudItem md="4" sm="12">
				<MudCard Outlined>
					<MudCardContent>
						<MudText Typo="Typo.h2" Align="Align.Center">@string.Format("{0:0.#}", humidity)%</MudText>
					</MudCardContent>
				</MudCard>
			</MudItem>
		</MudGrid>
	</div>
</MudContainer>

@code {
	private double tempF => (tempC * ((double)9 / 5)) + 32;
	private double tempC;
	private double humidity;

	private async Task GetSensorData()
	{
		try
		{
			var result = await Task.Run(() => "./sensor".Bash());
			Console.WriteLine(result);
			var tuple = JsonSerializer.Deserialize<Tuple<double, double>>(result);
			Console.WriteLine(tuple?.Item1);
			tempC = tuple?.Item1 ?? 0;
			humidity = tuple?.Item2 ?? 0;
		}
		catch (Exception)
		{
			await Task.Delay(1500);
			var random = new Random();
			tempC = random.NextDouble();
			humidity = random.NextDouble();
		}
	}

	private void ToggleLights(bool state)
	{
		int led1 = 2;
		int led2 = 3;
		int led3 = 4;
		int led4 = 17;
		using var controller = new GpioController();
		controller.OpenPin(led1, PinMode.Output);
		controller.OpenPin(led2, PinMode.Output);
		controller.OpenPin(led3, PinMode.Output);
		controller.OpenPin(led4, PinMode.Output);

		controller.Write(led1, ((state) ? PinValue.High : PinValue.Low));
		controller.Write(led2, ((state) ? PinValue.High : PinValue.Low));
		controller.Write(led3, ((state) ? PinValue.High : PinValue.Low));
		controller.Write(led4, ((state) ? PinValue.High : PinValue.Low));
	}
}